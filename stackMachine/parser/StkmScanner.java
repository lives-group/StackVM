/* The following code was generated by JFlex 1.4.3 on 10/2/18 8:42 PM */

package stackMachine.parser;

import java.util.ArrayList;
import stackMachine.instr.Instr;
import stackMachine.instr.arithmetical.*;
import stackMachine.instr.control.*;
import stackMachine.instr.logical.*;
import stackMachine.instr.memory.*;
import stackMachine.instr.io.*;
import stackMachine.LabelsMap;
import java.util.Hashtable;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/2/18 8:42 PM from the specification file
 * <tt>stackMachine/parser/stkm.flex</tt>
 */
class StkmScanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int ID = 14;
  private static final int JUMPT = 8;
  private static final int LABEL = 12;
  private static final int YYINITIAL = 0;
  private static final int COMMENT = 4;
  private static final int JUMP = 6;
  private static final int PUSH = 10;
  private static final int CHARLITERAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\0\1\4\1\1\22\0\1\4\1\0\1\42"+
    "\4\0\1\41\5\0\1\3\1\10\1\0\3\43\7\7\1\40\6\0"+
    "\32\6\1\0\1\11\4\0\1\12\1\17\1\34\1\13\1\31\1\24"+
    "\1\30\1\36\1\14\1\35\1\5\1\21\1\20\1\25\1\26\1\33"+
    "\1\32\1\27\1\15\1\22\1\16\1\23\4\5\1\37\1\0\1\44"+
    "\u05e2\0\12\7\206\0\12\7\306\0\12\7\u019c\0\12\7\166\0\12\7"+
    "\166\0\12\7\166\0\12\7\166\0\12\7\166\0\12\7\166\0\12\7"+
    "\166\0\12\7\166\0\12\7\340\0\12\7\166\0\12\7\106\0\12\7"+
    "\u0116\0\12\7\106\0\12\7\u0746\0\12\7\46\0\12\7\u012c\0\12\7"+
    "\200\0\12\7\246\0\12\7\6\0\12\7\266\0\12\7\126\0\12\7"+
    "\206\0\12\7\6\0\12\7\u89c6\0\12\7\u02a6\0\12\7\46\0\12\7"+
    "\306\0\12\7\166\0\12\7\u0196\0\12\7\u5316\0\12\7\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\1\15\3\2\1\2\4\1\1"+
    "\1\5\1\1\1\5\1\6\2\7\1\6\1\10\1\11"+
    "\2\12\1\13\1\14\2\13\1\15\1\1\1\16\1\2"+
    "\7\3\1\17\2\3\1\20\1\21\1\3\1\22\2\3"+
    "\1\23\2\3\1\24\1\25\10\26\1\27\2\26\1\30"+
    "\1\31\1\7\1\0\2\13\1\3\1\32\1\3\1\33"+
    "\4\3\1\34\3\3\1\35\2\3\1\0\1\27\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\0"+
    "\1\46\2\13\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\2\3\1\55\1\3\1\56\1\3\1\57\1\60\1\61"+
    "\1\13\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"+
    "\0\u0128\0\u014d\0\u0128\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206"+
    "\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e"+
    "\0\u0353\0\u0378\0\u039d\0\u03c2\0\u0128\0\u03e7\0\u0128\0\u040c"+
    "\0\u0431\0\u0128\0\u0456\0\u0128\0\u047b\0\u04a0\0\u04c5\0\u0128"+
    "\0\u047b\0\u04ea\0\u050f\0\u0534\0\u0559\0\u0128\0\u047b\0\u0128"+
    "\0\u057e\0\u05a3\0\u05c8\0\u05ed\0\u0612\0\u0637\0\u065c\0\u0681"+
    "\0\u0197\0\u06a6\0\u06cb\0\u0197\0\u0197\0\u06f0\0\u0197\0\u0715"+
    "\0\u073a\0\u0197\0\u075f\0\u0784\0\u0128\0\u0128\0\u0128\0\u07a9"+
    "\0\u07ce\0\u07f3\0\u0818\0\u083d\0\u0862\0\u0887\0\u08ac\0\u08d1"+
    "\0\u08f6\0\u0128\0\u0128\0\u091b\0\u0940\0\u0965\0\u098a\0\u09af"+
    "\0\u0197\0\u09d4\0\u0197\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0197"+
    "\0\u0a8d\0\u0ab2\0\u0ad7\0\u0197\0\u0afc\0\u0b21\0\u0b46\0\u0128"+
    "\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128"+
    "\0\u07a9\0\u0940\0\u0b6b\0\u0b90\0\u0197\0\u0197\0\u0197\0\u0197"+
    "\0\u0197\0\u0197\0\u0bb5\0\u0bda\0\u0197\0\u0bff\0\u0197\0\u0c24"+
    "\0\u0c49\0\u0197\0\u04ea\0\u0c6e\0\u0197\0\u0197\0\u0197\0\u0197"+
    "\0\u0197\0\u0c93\0\u0197\0\u04ea\0\u0197";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\13\1\15\4\11\1\16"+
    "\1\17\1\15\1\20\2\15\1\21\1\22\3\15\1\23"+
    "\1\24\1\15\1\25\1\26\1\15\1\27\1\15\1\30"+
    "\1\31\1\32\5\11\1\33\1\34\1\35\6\33\1\36"+
    "\27\33\1\11\3\33\3\37\1\40\33\37\1\41\5\37"+
    "\1\42\1\43\1\44\1\45\1\44\1\46\4\42\25\46"+
    "\7\42\1\43\1\44\1\45\1\44\1\47\4\42\25\47"+
    "\6\42\1\50\1\43\1\44\1\51\1\44\1\52\1\50"+
    "\1\53\2\50\10\52\1\54\1\52\1\55\12\52\2\50"+
    "\1\56\1\50\1\53\1\50\46\11\1\43\1\44\1\57"+
    "\1\44\33\11\1\60\4\11\47\0\1\13\45\0\1\61"+
    "\46\0\3\15\2\0\25\15\4\0\1\15\6\0\3\15"+
    "\2\0\1\15\1\62\11\15\1\63\11\15\4\0\1\15"+
    "\6\0\3\15\2\0\2\15\1\64\1\15\1\65\20\15"+
    "\4\0\1\15\6\0\3\15\2\0\4\15\1\66\3\15"+
    "\1\67\14\15\4\0\1\15\6\0\3\15\2\0\4\15"+
    "\1\70\20\15\4\0\1\15\6\0\3\15\2\0\10\15"+
    "\1\71\3\15\1\72\10\15\4\0\1\15\6\0\3\15"+
    "\2\0\14\15\1\73\10\15\4\0\1\15\6\0\3\15"+
    "\2\0\15\15\1\74\7\15\4\0\1\15\6\0\3\15"+
    "\2\0\10\15\1\75\6\15\1\76\5\15\4\0\1\15"+
    "\6\0\3\15\2\0\20\15\1\77\4\15\4\0\1\15"+
    "\6\0\3\15\2\0\4\15\1\100\7\15\1\101\5\15"+
    "\1\102\2\15\4\0\1\15\6\0\3\15\2\0\4\15"+
    "\1\103\20\15\4\0\1\15\6\0\3\15\2\0\1\104"+
    "\24\15\4\0\1\15\4\0\1\105\102\0\1\106\5\0"+
    "\1\35\42\0\2\107\1\0\4\107\1\110\1\107\1\111"+
    "\5\107\1\112\2\107\1\113\1\107\1\114\1\115\1\107"+
    "\1\116\11\107\1\117\1\120\1\121\1\107\44\0\1\122"+
    "\3\0\1\123\43\0\1\44\45\0\1\124\46\0\3\46"+
    "\2\0\25\46\4\0\1\46\6\0\3\47\2\0\25\47"+
    "\4\0\1\47\6\0\3\52\2\0\25\52\4\0\1\52"+
    "\10\0\1\53\1\125\32\0\1\53\6\0\3\52\2\0"+
    "\15\52\1\126\7\52\4\0\1\52\6\0\3\52\2\0"+
    "\1\127\24\52\4\0\1\52\1\0\1\61\2\0\42\61"+
    "\5\0\3\15\2\0\1\15\1\130\23\15\4\0\1\15"+
    "\6\0\3\15\2\0\1\15\1\131\23\15\4\0\1\15"+
    "\6\0\3\15\2\0\11\15\1\132\13\15\4\0\1\15"+
    "\6\0\3\15\2\0\21\15\1\133\3\15\4\0\1\15"+
    "\6\0\3\15\2\0\5\15\1\134\17\15\4\0\1\15"+
    "\6\0\3\15\2\0\14\15\1\135\10\15\4\0\1\15"+
    "\6\0\3\15\2\0\7\15\1\136\15\15\4\0\1\15"+
    "\6\0\3\15\2\0\1\137\24\15\4\0\1\15\6\0"+
    "\3\15\2\0\10\15\1\140\14\15\4\0\1\15\6\0"+
    "\3\15\2\0\10\15\1\141\14\15\4\0\1\15\6\0"+
    "\3\15\2\0\3\15\1\142\4\15\1\143\14\15\4\0"+
    "\1\15\6\0\3\15\2\0\21\15\1\144\3\15\4\0"+
    "\1\15\6\0\3\15\2\0\6\15\1\145\16\15\4\0"+
    "\1\15\6\0\3\15\2\0\7\15\1\146\15\15\4\0"+
    "\1\15\10\0\1\147\31\0\1\150\1\0\1\147\42\0"+
    "\1\151\44\0\1\152\44\0\1\153\44\0\1\154\44\0"+
    "\1\155\44\0\1\156\44\0\1\157\44\0\1\160\12\0"+
    "\1\161\31\0\1\150\1\0\1\161\1\0\1\124\2\0"+
    "\42\124\7\0\1\162\33\0\1\162\6\0\3\52\2\0"+
    "\4\52\1\163\20\52\4\0\1\52\6\0\3\52\2\0"+
    "\7\52\1\164\15\52\4\0\1\52\6\0\3\15\2\0"+
    "\2\15\1\165\7\15\1\166\12\15\4\0\1\15\6\0"+
    "\3\15\2\0\2\15\1\167\7\15\1\170\12\15\4\0"+
    "\1\15\6\0\3\15\2\0\2\15\1\171\7\15\1\172"+
    "\12\15\4\0\1\15\6\0\3\15\2\0\15\15\1\173"+
    "\7\15\4\0\1\15\6\0\3\15\2\0\10\15\1\174"+
    "\14\15\4\0\1\15\6\0\3\15\2\0\1\15\1\175"+
    "\23\15\4\0\1\15\6\0\3\15\2\0\22\15\1\176"+
    "\2\15\4\0\1\15\6\0\3\15\2\0\24\15\1\177"+
    "\4\0\1\15\6\0\3\15\2\0\22\15\1\200\2\15"+
    "\4\0\1\15\6\0\3\15\2\0\21\15\1\201\3\15"+
    "\4\0\1\15\6\0\3\15\2\0\10\15\1\202\14\15"+
    "\4\0\1\15\42\0\1\150\10\0\3\52\2\0\17\52"+
    "\1\203\5\52\4\0\1\52\6\0\3\52\2\0\3\52"+
    "\1\204\21\52\4\0\1\52\6\0\3\15\2\0\17\15"+
    "\1\205\5\15\4\0\1\15\6\0\3\15\2\0\2\15"+
    "\1\206\7\15\1\207\12\15\4\0\1\15\6\0\3\15"+
    "\2\0\24\15\1\210\4\0\1\15\6\0\3\15\2\0"+
    "\24\15\1\211\4\0\1\15\6\0\3\15\2\0\3\15"+
    "\1\212\4\15\1\213\14\15\4\0\1\15\6\0\3\52"+
    "\2\0\17\52\1\214\5\52\4\0\1\52\6\0\3\15"+
    "\2\0\10\15\1\215\14\15\4\0\1\15\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3256];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\1\1\1\11\21\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\3\1\1\11\5\1\1\11"+
    "\1\1\1\11\24\1\3\11\12\1\2\11\1\1\1\0"+
    "\21\1\1\0\11\11\1\0\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
        private String str;
        private int cCount = 0;
        private boolean hasNext;
        private ArrayList<Instr> prog;
        private LabelsMap m;
        private Hashtable<String,ArrayList<Integer>> pends;
        private int ic;
        
	private boolean hasNext(){return hasNext;}
	
	public Instr[] readPog(){
	    ic =0;
	    m.clear();
	    prog.clear();
	    pends.clear();
	    prog = new ArrayList<>();
	    pends = new Hashtable<String,ArrayList<Integer>>();
	    Instr i;
	    try{
 	       i = nextToken();
 	       while(i != null){
	          prog.add(i);
	          i = nextToken();
	       }
	    }catch(Exception e){
	       
	       e.printStackTrace();
	       System.out.println("Error on scanning the input. Aborting.");
	       return null;
	    }
	    Instr[] r = new Instr[2];
	    return prog.toArray(r);
	}
	
	public int getL(){ return yyline +1;}
	public int getC(){ return yycolumn +1;}
	
	private void declareLabel(String s){
	   m.put(s,ic);
	   ArrayList<Integer> pnd = pends.get(s);
	   if(pnd != null && prog.size()>0){
	      for(int  i =0; i < pnd.size(); i++){
	         if(prog.get(pnd.get(i)) instanceof Jump){
	            ((Jump)prog.get(pnd.get(i))).setTarget(ic);
	         }
             if(prog.get(pnd.get(i)) instanceof JumpT){
                ((JumpT)prog.get(pnd.get(i))).setTarget(ic);
             }
             if(prog.get(pnd.get(i)) instanceof Push){
                ((Push)prog.get(pnd.get(i))).setConst(ic);
             }
	      }
          pends.remove(s);
	   }
    }
    
    private int mkTarget(String lb){
        Integer i = m.get(lb);
        if(i != null){
            return i;
        }
        else{
          
          ArrayList<Integer> pnd = pends.get(lb); 
          if(pnd == null ){
             pnd = new ArrayList<Integer>();
             pnd.add(ic);
             pends.put(lb,pnd);
          }else{ pnd.add(ic); }
        }
        return -1;
    }
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  StkmScanner(java.io.Reader in) {
      hasNext = true;
    m = LabelsMap.mkInstance();
    ic = 0;
    prog = new ArrayList<>();
    pends = new Hashtable<String,ArrayList<Integer>>();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  StkmScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private Instr nextToken() throws java.io.IOException, Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { throw new RuntimeException("illegal char escape: \""+yytext()+"\"");
          }
        case 59: break;
        case 26: 
          { ic++;return new And(yyline+1,yycolumn+1);
          }
        case 60: break;
        case 55: 
          { ic++;return new JumpS(yyline+1,yycolumn+1);
          }
        case 61: break;
        case 47: 
          { yybegin(JUMP);
          }
        case 62: break;
        case 52: 
          { ic++;return new MultF(yyline+1,yycolumn+1);
          }
        case 63: break;
        case 51: 
          { ic++;return new MultI(yyline+1,yycolumn+1);
          }
        case 64: break;
        case 12: 
          { yybegin(YYINITIAL); ic++;return new Push(yyline+1,yycolumn+1, new Integer(yytext()));
          }
        case 65: break;
        case 32: 
          { yybegin(YYINITIAL); ic++; return new Push(yyline+1,yycolumn+1,(int)'\t');
          }
        case 66: break;
        case 2: 
          { /* Ignorar  */
          }
        case 67: break;
        case 4: 
          { throw new RuntimeException("char definition not ended at the end of the line.");
          }
        case 68: break;
        case 16: 
          { ic++;return new Or(yyline+1,yycolumn+1);
          }
        case 69: break;
        case 42: 
          { ic++;return new DivF(yyline+1,yycolumn+1);
          }
        case 70: break;
        case 48: 
          { ic++;return new Halt(yyline+1,yycolumn+1);
          }
        case 71: break;
        case 27: 
          { ic++;return new Dup(yyline+1,yycolumn+1);
          }
        case 72: break;
        case 58: 
          { ic++;return new JumpST(yyline+1,yycolumn+1);
          }
        case 73: break;
        case 56: 
          { yybegin(JUMPT);
          }
        case 74: break;
        case 41: 
          { ic++;return new DivI(yyline+1,yycolumn+1);
          }
        case 75: break;
        case 11: 
          { yybegin(YYINITIAL); str = yytext();int i = mkTarget(yytext());ic++; return new Push(yyline+1,yycolumn+1,i);
          }
        case 76: break;
        case 17: 
          { ic++;return new Gt(yyline+1,yycolumn+1);
          }
        case 77: break;
        case 40: 
          { ic++;return new AddF(yyline+1,yycolumn+1);
          }
        case 78: break;
        case 35: 
          { yybegin(YYINITIAL); ic++; return new Push(yyline+1,yycolumn+1,(int)'\r');
          }
        case 79: break;
        case 19: 
          { ic++;return new Pc(yyline+1,yycolumn+1);
          }
        case 80: break;
        case 39: 
          { ic++;return new AddI(yyline+1,yycolumn+1);
          }
        case 81: break;
        case 33: 
          { yybegin(YYINITIAL); ic++; return new Push(yyline+1,yycolumn+1,(int)'\f');
          }
        case 82: break;
        case 30: 
          { yybegin(YYINITIAL);  ic++; return new Push(yyline+1,yycolumn+1,(int)'\\');
          }
        case 83: break;
        case 37: 
          { yybegin(YYINITIAL); ic++; return new Push(yyline+1,yycolumn+1,(int)'\"');
          }
        case 84: break;
        case 29: 
          { ic++;return new Pop(yyline+1,yycolumn+1);
          }
        case 85: break;
        case 57: 
          { yybegin(YYINITIAL); ic++;return new Push(yyline+1,yycolumn+1,false);
          }
        case 86: break;
        case 15: 
          { ic++;return new Lt(yyline+1,yycolumn+1);
          }
        case 87: break;
        case 1: 
          { throw new RuntimeException("unexpected input char at line " + (yyline+1) +  " '" + yytext() + "'");
          }
        case 88: break;
        case 36: 
          { yybegin(YYINITIAL); ic++; return new Push(yyline+1,yycolumn+1,(int)'\'');
          }
        case 89: break;
        case 23: 
          { yybegin(YYINITIAL); 
                                   int c = Integer.parseInt(yytext().substring(1,yylength()-1));
                                   ic++;
                                   return new Push(yyline+1,yycolumn+1,c);
          }
        case 90: break;
        case 38: 
          { yybegin(YYINITIAL); ic++;return new Push(yyline+1,yycolumn+1, new Float(yytext()) );
          }
        case 91: break;
        case 28: 
          { ic++;return new Not(yyline+1,yycolumn+1);
          }
        case 92: break;
        case 46: 
          { yybegin(PUSH);
          }
        case 93: break;
        case 9: 
          { int i = mkTarget(yytext()); yybegin(YYINITIAL) ;ic++;return new JumpT(yyline+1,yycolumn+1,i);
          }
        case 94: break;
        case 3: 
          { yybegin(ID); str = yytext();
          }
        case 95: break;
        case 5: 
          { /* descartar ! */
          }
        case 96: break;
        case 8: 
          { int i = mkTarget(yytext()); yybegin(YYINITIAL) ; ic++;return new Jump(yyline+1,yycolumn+1,i);
          }
        case 97: break;
        case 34: 
          { yybegin(YYINITIAL); ic++; return new Push(yyline+1,yycolumn+1,(int)'\n');
          }
        case 98: break;
        case 14: 
          { yybegin(YYINITIAL); declareLabel(str);
          }
        case 99: break;
        case 31: 
          { yybegin(YYINITIAL); ic++; return new Push(yyline+1,yycolumn+1,(int)'\b');
          }
        case 100: break;
        case 18: 
          { ic++;return new Eq(yyline+1,yycolumn+1);
          }
        case 101: break;
        case 50: 
          { ic++;return new Store(yyline+1,yycolumn+1);
          }
        case 102: break;
        case 10: 
          { throw new RuntimeException((yyline+1) + ":" + (yycolumn+1) + "Expecting a real or float, but \""+yytext()+"\" found." );
          }
        case 103: break;
        case 24: 
          { cCount--;  if(cCount == 0){ yybegin(YYINITIAL);}
          }
        case 104: break;
        case 49: 
          { yybegin(YYINITIAL); ic++;return new Push(yyline+1,yycolumn+1,true);
          }
        case 105: break;
        case 44: 
          { ic++;return new SubF(yyline+1,yycolumn+1);
          }
        case 106: break;
        case 20: 
          { cCount++; yybegin(COMMENT);
          }
        case 107: break;
        case 53: 
          { ic++;return new Get(yyline+1,yycolumn+1);
          }
        case 108: break;
        case 43: 
          { ic++;return new SubI(yyline+1,yycolumn+1);
          }
        case 109: break;
        case 45: 
          { ic++;return new Load(yyline+1,yycolumn+1);
          }
        case 110: break;
        case 54: 
          { ic++;return new Put(yyline+1,yycolumn+1);
          }
        case 111: break;
        case 25: 
          { cCount++;
          }
        case 112: break;
        case 6: 
          { throw new RuntimeException((yyline+1) + ":" + (yycolumn+1) + "Expecting a label, but \""+yytext()+"\" found." );
          }
        case 113: break;
        case 21: 
          { yybegin(YYINITIAL); return new Push(yyline+1,yycolumn+1, (int)yytext().charAt(0));
          }
        case 114: break;
        case 7: 
          { 
          }
        case 115: break;
        case 13: 
          { yybegin(CHARLITERAL);
          }
        case 116: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {          hasNext = false;
         return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
